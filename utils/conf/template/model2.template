package _

import (
	"git.zuoyebang.cc/huixuexi/classflow/layer"
	"gorm.io/gorm"
)

const TableNameOf{{.BeanName}} = "{{.TableName}}"

type {{ .TableName | ToCamelCaseFistLarge }} struct {
    {{range .Columns}}{{.ColumnName | ToCamelCaseFistLarge}}  {{.StructType}}  {{if .IsPrimary}}`gorm:"primarykey"{{else}}`gorm:"column:{{.ColumnName}}"{{end}} json:"{{.ColumnName}}"`    {{$commentLength := len .Comment }} {{ if gt $commentLength 0 }} // {{ .Comment }} {{end}}
    {{end}}
}

type {{.BeanName}}Dao struct {
	models.Dao
}

func New{{.BeanName}}Dao(ctx *gin.Context) (db *{{.BeanName}}Dao) {
	db = new({{.BeanName}}Dao)
	db.Dao = models.NewDao(ctx, helpers.MysqlClientapps.WithContext(ctx))
	return
}

func (entity *{{.BeanName}}Dao) Insert(bean *{{ .TableName | ToCamelCaseFistLarge }}) error {
	err := entity.Tx.Table(TableNameOf{{.BeanName}}).Create(bean).Error
	if err != nil {
		zlog.Errorf(entity.Ctx, "db insert {{.TableName}} error, bean:%v, cause:%v", bean, err)
		return outerror.ErrorDbInsert.Sprintf(err.Error())
	}
	return nil
}

func (entity *{{.BeanName}}Dao) Update(info *{{ .TableName | ToCamelCaseFistLarge }}) (int64, error) {
    if info.Id == 0 {
		return 0, outerror.ErrorParamInvalid
	}
	rs := entity.Tx.Table(TableNameOf{{.BeanName}}).Updates(info)
	if rs.Error != nil {
		zlog.Errorf(entity.Ctx, "db update {{.TableName}} error, info:%v, cause:%v", info, rs.Error)
		return 0, outerror.ErrorDbUpdate.Sprintf(rs.Error.Error())
	}
	return rs.RowsAffected, nil
}

func (entity *{{.BeanName}}Dao) QueryById(id int64) (*{{ .TableName | ToCamelCaseFistLarge }}, error) {
    if id == 0 {
		return nil, outerror.ErrorParamInvalid
	}
	info := new({{ .TableName | ToCamelCaseFistLarge }})
	rs := entity.Tx.Table(TableNameOf{{.BeanName}}).Find(&info, id)
	if rs.Error == gorm.ErrRecordNotFound {
   		return nil, nil
   	}
	if rs.Error != nil {
		zlog.Errorf(entity.Ctx, "db query by id {{.TableName}} error, id:%v, cause:%v", id, rs.Error)
		return nil, outerror.ErrorDbSelect.Sprintf(rs.Error.Error())
	}
	return info, nil
}

